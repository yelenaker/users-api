trigger:
  branches:
    include:
      - main
      - feature/*

pool:
  name: Default

variables:
  system.debug: true
  group: docker-settings(users-api)
  FORCE_VERSION: ''
  DOCKER_REPOSITORY: "qwqwqwrwe/users-api"
  TEMPLATES_DIR: $(Build.SourcesDirectory)/templates
  HELM_REPOSITORY: "oci://docker.io/qwqwqwrwe/users-api"

resources:
  repositories:
    - repository: templates
      type: git
      name: ReadingTracker/ci-templates
      ref: refs/heads/main

stages:
# 1. PRE-BUILD
  - stage: Pre_Build
    jobs:
      - job: Pre_Build_Analysis
        steps:
          - checkout: self
          - checkout: templates
            path: templates

          - script: |
              echo "##vso[task.setvariable variable=TEMPLATES_DIR]$(Build.SourcesDirectory)/templates"
            displayName: "Set TEMPLATES_DIR Variable"

          - script: |
              echo "== Azure DevOps Variables ==" 
              echo "Agent.TempDirectory: $(Agent.TempDirectory)"
              echo "Build.SourceBranch: $(Build.SourceBranch)"
              echo "Build.Repository.Name: $(Build.Repository.Name)"
              echo "DOCKER_REPOSITORY: $(DOCKER_REPOSITORY)"
              echo "APP_VERSION: $(APP_VERSION)"
            displayName: "Print Azure DevOps Variables"

          - bash: |
              if ! command -v jq &> /dev/null; then
                sudo apt-get update && sudo apt-get install -y jq
              else
                echo "jq is already installed"
              fi
            displayName: "Install jq if not installed"

          - bash: |
              echo "== Searching for dockerhub.sh =="
              find $(Build.SourcesDirectory) -name "dockerhub.sh"
            displayName: "Search dockerhub.sh"

          - bash: |
              VERSION=$(bash "$(TEMPLATES_DIR)/common-scripts/dockerhub.sh" $(DOCKER_USERNAME) $(DOCKER_REPOSITORY))
              echo "##vso[task.setvariable variable=APP_VERSION_FROM_SCRIPT;isOutput=true]$VERSION"
            displayName: "Get Version from dockerhub.sh"
            condition: and(succeeded(), eq(variables['FORCE_VERSION'], ''))
            name: set_app_version

# 2. BUILD & TEST
  - stage: Project_Build_and_Test
    dependsOn: Pre_Build
    condition: succeeded()
    jobs:
      - job: Build_And_Test
        steps:
          - script: |
              echo "üèóÔ∏è Running tests or build logic"
            displayName: "Run Unit Tests"

          - task: PublishBuildArtifacts@1
            inputs:
              PathtoPublish: $(Build.ArtifactStagingDirectory)
              ArtifactName: 'drop'
              publishLocation: 'Container'

# 3. DOCKER BUILD & PUSH
  - stage: Docker_Build_and_Push
    dependsOn: Project_Build_and_Test
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
    variables:
      APP_VERSION: $[ stageDependencies.Pre_Build.Pre_Build_Analysis.outputs['set_app_version.APP_VERSION_FROM_SCRIPT'] ]
    jobs:
      - job: Build_and_Push
        steps:
          - task: Docker@2
            displayName: "Build Docker Image"
            inputs:
              command: build
              repository: $(DOCKER_REPOSITORY)
              dockerfile: Dockerfile
              containerRegistry: dockerhub-usersapi-connection
              tags: |
                $(APP_VERSION)

          - task: Docker@2
            displayName: "Push Docker Image"
            inputs:
              command: push
              repository: $(DOCKER_REPOSITORY)
              containerRegistry: dockerhub-usersapi-connection
              tags: |
                $(APP_VERSION)

# 4. HELM
  - stage: Helm_Chart_Pack_and_Push
    dependsOn: Docker_Build_and_Push
    condition: succeeded()
    jobs:
      - job: Pack_and_Push
        steps:
          - script: |
              echo "üéØ Pack and Push Helm chart"
            displayName: 'Pack and Push'

# 5. POST BUILD
  - stage: Post_Build
    dependsOn: Helm_Chart_Pack_and_Push
    condition: succeeded()
    jobs:
      - job: Post_Build
        steps:
          - script: echo "‚úÖ Pipeline –∑–∞–≤–µ—Ä—à–µ–Ω–æ"
          - script: |
              echo "DOCKER_USERNAME: $DOCKER_USERNAME"
              echo "DOCKER_REPOSITORY: $DOCKER_REPOSITORY"
              echo "APP_VERSION: $APP_VERSION"
              echo "APP_VERSION_FROM_SCRIPT: $APP_VERSION_FROM_SCRIPT"
